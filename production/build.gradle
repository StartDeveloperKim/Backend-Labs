plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-client'
//	implementation 'org.springframework.session:spring-session-jdbc'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
}


tasks.named('test') {
	useJUnitPlatform()
}

task('release') {
	/* ./gradlew build를 먼저 실행하라는 뜻*/
	dependsOn("build")

	doLast{
		def stdout = new ByteArrayOutputStream()
		/* exec - 커맨드 라인 프로세서; 파워셸/터미널에서 실행하는 것과 같다. */
		exec {
			/* $eb setenv SPRING_PROFILES_ACTIVE=prod*/
			commandLine 'eb', 'setenv', 'SPRING_PROFILES_ACTIVE=prod'
			standardOutput = stdout
		}
		/*결과 로깅을 위한 작업*/
		println "eb setenv SPRING_PROFILES_ACTIVE=prod :\n$stdout";
		exec {
			/*$eb deploy*/
			commandLine 'eb', 'deploy'
			standardOutput = stdout
		}
		println "eb deploy :\n$stdout";
		println "Release succeeded."
	}
}
